// Code generated by MockGen. DO NOT EDIT.
// Source: ethclient.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	json "encoding/json"
	types "github.com/consensys/orchestrate/pkg/ethereum/types"
	"github.com/consensys/orchestrate/pkg/toolkit/app/http/transport"
	rpc "github.com/consensys/orchestrate/pkg/toolkit/ethclient/rpc"
	ethereum "github.com/consensys/orchestrate/pkg/types/ethereum"
	ethereum0 "github.com/ethereum/go-ethereum"
	common "github.com/ethereum/go-ethereum/common"
	hexutil "github.com/ethereum/go-ethereum/common/hexutil"
	types0 "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
	big "math/big"
	reflect "reflect"
)

// MockTransactionSender is a mock of TransactionSender interface
type MockTransactionSender struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionSenderMockRecorder
}

// MockTransactionSenderMockRecorder is the mock recorder for MockTransactionSender
type MockTransactionSenderMockRecorder struct {
	mock *MockTransactionSender
}

// NewMockTransactionSender creates a new mock instance
func NewMockTransactionSender(ctrl *gomock.Controller) *MockTransactionSender {
	mock := &MockTransactionSender{ctrl: ctrl}
	mock.recorder = &MockTransactionSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionSender) EXPECT() *MockTransactionSenderMockRecorder {
	return m.recorder
}

// SendTransaction mocks base method
func (m *MockTransactionSender) SendTransaction(ctx context.Context, url string, args *types.SendTxArgs) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransaction", ctx, url, args)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction
func (mr *MockTransactionSenderMockRecorder) SendTransaction(ctx, url, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockTransactionSender)(nil).SendTransaction), ctx, url, args)
}

// SendRawTransaction mocks base method
func (m *MockTransactionSender) SendRawTransaction(ctx context.Context, url string, raw hexutil.Bytes) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawTransaction", ctx, url, raw)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawTransaction indicates an expected call of SendRawTransaction
func (mr *MockTransactionSenderMockRecorder) SendRawTransaction(ctx, url, raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawTransaction", reflect.TypeOf((*MockTransactionSender)(nil).SendRawTransaction), ctx, url, raw)
}

// SendRawPrivateTransaction mocks base method
func (m *MockTransactionSender) SendRawPrivateTransaction(ctx context.Context, url string, raw hexutil.Bytes) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawPrivateTransaction", ctx, url, raw)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawPrivateTransaction indicates an expected call of SendRawPrivateTransaction
func (mr *MockTransactionSenderMockRecorder) SendRawPrivateTransaction(ctx, url, raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawPrivateTransaction", reflect.TypeOf((*MockTransactionSender)(nil).SendRawPrivateTransaction), ctx, url, raw)
}

// MockEEATransactionSender is a mock of EEATransactionSender interface
type MockEEATransactionSender struct {
	ctrl     *gomock.Controller
	recorder *MockEEATransactionSenderMockRecorder
}

// MockEEATransactionSenderMockRecorder is the mock recorder for MockEEATransactionSender
type MockEEATransactionSenderMockRecorder struct {
	mock *MockEEATransactionSender
}

// NewMockEEATransactionSender creates a new mock instance
func NewMockEEATransactionSender(ctrl *gomock.Controller) *MockEEATransactionSender {
	mock := &MockEEATransactionSender{ctrl: ctrl}
	mock.recorder = &MockEEATransactionSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEEATransactionSender) EXPECT() *MockEEATransactionSenderMockRecorder {
	return m.recorder
}

// PrivDistributeRawTransaction mocks base method
func (m *MockEEATransactionSender) PrivDistributeRawTransaction(ctx context.Context, endpoint string, raw hexutil.Bytes) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivDistributeRawTransaction", ctx, endpoint, raw)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivDistributeRawTransaction indicates an expected call of PrivDistributeRawTransaction
func (mr *MockEEATransactionSenderMockRecorder) PrivDistributeRawTransaction(ctx, endpoint, raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivDistributeRawTransaction", reflect.TypeOf((*MockEEATransactionSender)(nil).PrivDistributeRawTransaction), ctx, endpoint, raw)
}

// PrivCreatePrivacyGroup mocks base method
func (m *MockEEATransactionSender) PrivCreatePrivacyGroup(ctx context.Context, endpoint string, addresses []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivCreatePrivacyGroup", ctx, endpoint, addresses)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivCreatePrivacyGroup indicates an expected call of PrivCreatePrivacyGroup
func (mr *MockEEATransactionSenderMockRecorder) PrivCreatePrivacyGroup(ctx, endpoint, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivCreatePrivacyGroup", reflect.TypeOf((*MockEEATransactionSender)(nil).PrivCreatePrivacyGroup), ctx, endpoint, addresses)
}

// MockQuorumTransactionSender is a mock of QuorumTransactionSender interface
type MockQuorumTransactionSender struct {
	ctrl     *gomock.Controller
	recorder *MockQuorumTransactionSenderMockRecorder
}

// MockQuorumTransactionSenderMockRecorder is the mock recorder for MockQuorumTransactionSender
type MockQuorumTransactionSenderMockRecorder struct {
	mock *MockQuorumTransactionSender
}

// NewMockQuorumTransactionSender creates a new mock instance
func NewMockQuorumTransactionSender(ctrl *gomock.Controller) *MockQuorumTransactionSender {
	mock := &MockQuorumTransactionSender{ctrl: ctrl}
	mock.recorder = &MockQuorumTransactionSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuorumTransactionSender) EXPECT() *MockQuorumTransactionSenderMockRecorder {
	return m.recorder
}

// SendQuorumRawPrivateTransaction mocks base method
func (m *MockQuorumTransactionSender) SendQuorumRawPrivateTransaction(ctx context.Context, url string, raw hexutil.Bytes, privateFor, mandatoryFor []string, privacyFlag int) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendQuorumRawPrivateTransaction", ctx, url, raw, privateFor, mandatoryFor, privacyFlag)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendQuorumRawPrivateTransaction indicates an expected call of SendQuorumRawPrivateTransaction
func (mr *MockQuorumTransactionSenderMockRecorder) SendQuorumRawPrivateTransaction(ctx, url, raw, privateFor, mandatoryFor, privacyFlag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendQuorumRawPrivateTransaction", reflect.TypeOf((*MockQuorumTransactionSender)(nil).SendQuorumRawPrivateTransaction), ctx, url, raw, privateFor, mandatoryFor, privacyFlag)
}

// StoreRaw mocks base method
func (m *MockQuorumTransactionSender) StoreRaw(ctx context.Context, endpoint string, data hexutil.Bytes, privateFrom string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRaw", ctx, endpoint, data, privateFrom)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreRaw indicates an expected call of StoreRaw
func (mr *MockQuorumTransactionSenderMockRecorder) StoreRaw(ctx, endpoint, data, privateFrom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRaw", reflect.TypeOf((*MockQuorumTransactionSender)(nil).StoreRaw), ctx, endpoint, data, privateFrom)
}

// MockChainLedgerReader is a mock of ChainLedgerReader interface
type MockChainLedgerReader struct {
	ctrl     *gomock.Controller
	recorder *MockChainLedgerReaderMockRecorder
}

// MockChainLedgerReaderMockRecorder is the mock recorder for MockChainLedgerReader
type MockChainLedgerReaderMockRecorder struct {
	mock *MockChainLedgerReader
}

// NewMockChainLedgerReader creates a new mock instance
func NewMockChainLedgerReader(ctrl *gomock.Controller) *MockChainLedgerReader {
	mock := &MockChainLedgerReader{ctrl: ctrl}
	mock.recorder = &MockChainLedgerReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainLedgerReader) EXPECT() *MockChainLedgerReaderMockRecorder {
	return m.recorder
}

// BlockByHash mocks base method
func (m *MockChainLedgerReader) BlockByHash(ctx context.Context, url string, hash common.Hash) (*types0.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByHash", ctx, url, hash)
	ret0, _ := ret[0].(*types0.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByHash indicates an expected call of BlockByHash
func (mr *MockChainLedgerReaderMockRecorder) BlockByHash(ctx, url, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByHash", reflect.TypeOf((*MockChainLedgerReader)(nil).BlockByHash), ctx, url, hash)
}

// BlockByNumber mocks base method
func (m *MockChainLedgerReader) BlockByNumber(ctx context.Context, url string, number *big.Int) (*types0.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByNumber", ctx, url, number)
	ret0, _ := ret[0].(*types0.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByNumber indicates an expected call of BlockByNumber
func (mr *MockChainLedgerReaderMockRecorder) BlockByNumber(ctx, url, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByNumber", reflect.TypeOf((*MockChainLedgerReader)(nil).BlockByNumber), ctx, url, number)
}

// HeaderByHash mocks base method
func (m *MockChainLedgerReader) HeaderByHash(ctx context.Context, url string, hash common.Hash) (*types0.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderByHash", ctx, url, hash)
	ret0, _ := ret[0].(*types0.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeaderByHash indicates an expected call of HeaderByHash
func (mr *MockChainLedgerReaderMockRecorder) HeaderByHash(ctx, url, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderByHash", reflect.TypeOf((*MockChainLedgerReader)(nil).HeaderByHash), ctx, url, hash)
}

// HeaderByNumber mocks base method
func (m *MockChainLedgerReader) HeaderByNumber(ctx context.Context, url string, number *big.Int) (*types0.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderByNumber", ctx, url, number)
	ret0, _ := ret[0].(*types0.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeaderByNumber indicates an expected call of HeaderByNumber
func (mr *MockChainLedgerReaderMockRecorder) HeaderByNumber(ctx, url, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderByNumber", reflect.TypeOf((*MockChainLedgerReader)(nil).HeaderByNumber), ctx, url, number)
}

// TransactionByHash mocks base method
func (m *MockChainLedgerReader) TransactionByHash(ctx context.Context, url string, hash common.Hash) (*types0.Transaction, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionByHash", ctx, url, hash)
	ret0, _ := ret[0].(*types0.Transaction)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TransactionByHash indicates an expected call of TransactionByHash
func (mr *MockChainLedgerReaderMockRecorder) TransactionByHash(ctx, url, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionByHash", reflect.TypeOf((*MockChainLedgerReader)(nil).TransactionByHash), ctx, url, hash)
}

// TransactionReceipt mocks base method
func (m *MockChainLedgerReader) TransactionReceipt(ctx context.Context, url string, txHash common.Hash) (*ethereum.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionReceipt", ctx, url, txHash)
	ret0, _ := ret[0].(*ethereum.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionReceipt indicates an expected call of TransactionReceipt
func (mr *MockChainLedgerReaderMockRecorder) TransactionReceipt(ctx, url, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionReceipt", reflect.TypeOf((*MockChainLedgerReader)(nil).TransactionReceipt), ctx, url, txHash)
}

// MockEEAChainLedgerReader is a mock of EEAChainLedgerReader interface
type MockEEAChainLedgerReader struct {
	ctrl     *gomock.Controller
	recorder *MockEEAChainLedgerReaderMockRecorder
}

// MockEEAChainLedgerReaderMockRecorder is the mock recorder for MockEEAChainLedgerReader
type MockEEAChainLedgerReaderMockRecorder struct {
	mock *MockEEAChainLedgerReader
}

// NewMockEEAChainLedgerReader creates a new mock instance
func NewMockEEAChainLedgerReader(ctrl *gomock.Controller) *MockEEAChainLedgerReader {
	mock := &MockEEAChainLedgerReader{ctrl: ctrl}
	mock.recorder = &MockEEAChainLedgerReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEEAChainLedgerReader) EXPECT() *MockEEAChainLedgerReaderMockRecorder {
	return m.recorder
}

// PrivateTransactionReceipt mocks base method
func (m *MockEEAChainLedgerReader) PrivateTransactionReceipt(ctx context.Context, url string, txHash common.Hash) (*ethereum.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateTransactionReceipt", ctx, url, txHash)
	ret0, _ := ret[0].(*ethereum.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivateTransactionReceipt indicates an expected call of PrivateTransactionReceipt
func (mr *MockEEAChainLedgerReaderMockRecorder) PrivateTransactionReceipt(ctx, url, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateTransactionReceipt", reflect.TypeOf((*MockEEAChainLedgerReader)(nil).PrivateTransactionReceipt), ctx, url, txHash)
}

// PrivCodeAt mocks base method
func (m *MockEEAChainLedgerReader) PrivCodeAt(ctx context.Context, url string, account common.Address, privateGroupID string, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivCodeAt", ctx, url, account, privateGroupID, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivCodeAt indicates an expected call of PrivCodeAt
func (mr *MockEEAChainLedgerReaderMockRecorder) PrivCodeAt(ctx, url, account, privateGroupID, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivCodeAt", reflect.TypeOf((*MockEEAChainLedgerReader)(nil).PrivCodeAt), ctx, url, account, privateGroupID, blockNumber)
}

// MockChainStateReader is a mock of ChainStateReader interface
type MockChainStateReader struct {
	ctrl     *gomock.Controller
	recorder *MockChainStateReaderMockRecorder
}

// MockChainStateReaderMockRecorder is the mock recorder for MockChainStateReader
type MockChainStateReaderMockRecorder struct {
	mock *MockChainStateReader
}

// NewMockChainStateReader creates a new mock instance
func NewMockChainStateReader(ctrl *gomock.Controller) *MockChainStateReader {
	mock := &MockChainStateReader{ctrl: ctrl}
	mock.recorder = &MockChainStateReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainStateReader) EXPECT() *MockChainStateReaderMockRecorder {
	return m.recorder
}

// BalanceAt mocks base method
func (m *MockChainStateReader) BalanceAt(ctx context.Context, url string, account common.Address, blockNumber *big.Int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceAt", ctx, url, account, blockNumber)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceAt indicates an expected call of BalanceAt
func (mr *MockChainStateReaderMockRecorder) BalanceAt(ctx, url, account, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceAt", reflect.TypeOf((*MockChainStateReader)(nil).BalanceAt), ctx, url, account, blockNumber)
}

// StorageAt mocks base method
func (m *MockChainStateReader) StorageAt(ctx context.Context, url string, account common.Address, key common.Hash, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageAt", ctx, url, account, key, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageAt indicates an expected call of StorageAt
func (mr *MockChainStateReaderMockRecorder) StorageAt(ctx, url, account, key, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageAt", reflect.TypeOf((*MockChainStateReader)(nil).StorageAt), ctx, url, account, key, blockNumber)
}

// CodeAt mocks base method
func (m *MockChainStateReader) CodeAt(ctx context.Context, url string, account common.Address, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CodeAt", ctx, url, account, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CodeAt indicates an expected call of CodeAt
func (mr *MockChainStateReaderMockRecorder) CodeAt(ctx, url, account, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CodeAt", reflect.TypeOf((*MockChainStateReader)(nil).CodeAt), ctx, url, account, blockNumber)
}

// NonceAt mocks base method
func (m *MockChainStateReader) NonceAt(ctx context.Context, url string, account common.Address, blockNumber *big.Int) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NonceAt", ctx, url, account, blockNumber)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NonceAt indicates an expected call of NonceAt
func (mr *MockChainStateReaderMockRecorder) NonceAt(ctx, url, account, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NonceAt", reflect.TypeOf((*MockChainStateReader)(nil).NonceAt), ctx, url, account, blockNumber)
}

// PendingBalanceAt mocks base method
func (m *MockChainStateReader) PendingBalanceAt(ctx context.Context, url string, account common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingBalanceAt", ctx, url, account)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingBalanceAt indicates an expected call of PendingBalanceAt
func (mr *MockChainStateReaderMockRecorder) PendingBalanceAt(ctx, url, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingBalanceAt", reflect.TypeOf((*MockChainStateReader)(nil).PendingBalanceAt), ctx, url, account)
}

// PendingStorageAt mocks base method
func (m *MockChainStateReader) PendingStorageAt(ctx context.Context, url string, account common.Address, key common.Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingStorageAt", ctx, url, account, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingStorageAt indicates an expected call of PendingStorageAt
func (mr *MockChainStateReaderMockRecorder) PendingStorageAt(ctx, url, account, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingStorageAt", reflect.TypeOf((*MockChainStateReader)(nil).PendingStorageAt), ctx, url, account, key)
}

// PendingCodeAt mocks base method
func (m *MockChainStateReader) PendingCodeAt(ctx context.Context, url string, account common.Address) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingCodeAt", ctx, url, account)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingCodeAt indicates an expected call of PendingCodeAt
func (mr *MockChainStateReaderMockRecorder) PendingCodeAt(ctx, url, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingCodeAt", reflect.TypeOf((*MockChainStateReader)(nil).PendingCodeAt), ctx, url, account)
}

// PendingNonceAt mocks base method
func (m *MockChainStateReader) PendingNonceAt(ctx context.Context, url string, account common.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingNonceAt", ctx, url, account)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingNonceAt indicates an expected call of PendingNonceAt
func (mr *MockChainStateReaderMockRecorder) PendingNonceAt(ctx, url, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingNonceAt", reflect.TypeOf((*MockChainStateReader)(nil).PendingNonceAt), ctx, url, account)
}

// MockEEAChainStateReader is a mock of EEAChainStateReader interface
type MockEEAChainStateReader struct {
	ctrl     *gomock.Controller
	recorder *MockEEAChainStateReaderMockRecorder
}

// MockEEAChainStateReaderMockRecorder is the mock recorder for MockEEAChainStateReader
type MockEEAChainStateReaderMockRecorder struct {
	mock *MockEEAChainStateReader
}

// NewMockEEAChainStateReader creates a new mock instance
func NewMockEEAChainStateReader(ctrl *gomock.Controller) *MockEEAChainStateReader {
	mock := &MockEEAChainStateReader{ctrl: ctrl}
	mock.recorder = &MockEEAChainStateReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEEAChainStateReader) EXPECT() *MockEEAChainStateReaderMockRecorder {
	return m.recorder
}

// PrivEEANonce mocks base method
func (m *MockEEAChainStateReader) PrivEEANonce(ctx context.Context, endpoint string, account common.Address, privateFrom string, privateFor []string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivEEANonce", ctx, endpoint, account, privateFrom, privateFor)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivEEANonce indicates an expected call of PrivEEANonce
func (mr *MockEEAChainStateReaderMockRecorder) PrivEEANonce(ctx, endpoint, account, privateFrom, privateFor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivEEANonce", reflect.TypeOf((*MockEEAChainStateReader)(nil).PrivEEANonce), ctx, endpoint, account, privateFrom, privateFor)
}

// PrivNonce mocks base method
func (m *MockEEAChainStateReader) PrivNonce(ctx context.Context, endpoint string, account common.Address, privacyGroupID string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivNonce", ctx, endpoint, account, privacyGroupID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivNonce indicates an expected call of PrivNonce
func (mr *MockEEAChainStateReaderMockRecorder) PrivNonce(ctx, endpoint, account, privacyGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivNonce", reflect.TypeOf((*MockEEAChainStateReader)(nil).PrivNonce), ctx, endpoint, account, privacyGroupID)
}

// PrivFindPrivacyGroup mocks base method
func (m *MockEEAChainStateReader) PrivFindPrivacyGroup(ctx context.Context, endpoint string, members []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivFindPrivacyGroup", ctx, endpoint, members)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivFindPrivacyGroup indicates an expected call of PrivFindPrivacyGroup
func (mr *MockEEAChainStateReaderMockRecorder) PrivFindPrivacyGroup(ctx, endpoint, members interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivFindPrivacyGroup", reflect.TypeOf((*MockEEAChainStateReader)(nil).PrivFindPrivacyGroup), ctx, endpoint, members)
}

// EEAPrivPrecompiledContractAddr mocks base method
func (m *MockEEAChainStateReader) EEAPrivPrecompiledContractAddr(ctx context.Context, endpoint string) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EEAPrivPrecompiledContractAddr", ctx, endpoint)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EEAPrivPrecompiledContractAddr indicates an expected call of EEAPrivPrecompiledContractAddr
func (mr *MockEEAChainStateReaderMockRecorder) EEAPrivPrecompiledContractAddr(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EEAPrivPrecompiledContractAddr", reflect.TypeOf((*MockEEAChainStateReader)(nil).EEAPrivPrecompiledContractAddr), ctx, endpoint)
}

// MockQuorumChainStateReader is a mock of QuorumChainStateReader interface
type MockQuorumChainStateReader struct {
	ctrl     *gomock.Controller
	recorder *MockQuorumChainStateReaderMockRecorder
}

// MockQuorumChainStateReaderMockRecorder is the mock recorder for MockQuorumChainStateReader
type MockQuorumChainStateReaderMockRecorder struct {
	mock *MockQuorumChainStateReader
}

// NewMockQuorumChainStateReader creates a new mock instance
func NewMockQuorumChainStateReader(ctrl *gomock.Controller) *MockQuorumChainStateReader {
	mock := &MockQuorumChainStateReader{ctrl: ctrl}
	mock.recorder = &MockQuorumChainStateReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuorumChainStateReader) EXPECT() *MockQuorumChainStateReaderMockRecorder {
	return m.recorder
}

// GetStatus mocks base method
func (m *MockQuorumChainStateReader) GetStatus(ctx context.Context, endpoint string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, endpoint)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockQuorumChainStateReaderMockRecorder) GetStatus(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockQuorumChainStateReader)(nil).GetStatus), ctx, endpoint)
}

// MockContractCaller is a mock of ContractCaller interface
type MockContractCaller struct {
	ctrl     *gomock.Controller
	recorder *MockContractCallerMockRecorder
}

// MockContractCallerMockRecorder is the mock recorder for MockContractCaller
type MockContractCallerMockRecorder struct {
	mock *MockContractCaller
}

// NewMockContractCaller creates a new mock instance
func NewMockContractCaller(ctrl *gomock.Controller) *MockContractCaller {
	mock := &MockContractCaller{ctrl: ctrl}
	mock.recorder = &MockContractCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContractCaller) EXPECT() *MockContractCallerMockRecorder {
	return m.recorder
}

// CallContract mocks base method
func (m *MockContractCaller) CallContract(ctx context.Context, url string, msg *ethereum0.CallMsg, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContract", ctx, url, msg, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallContract indicates an expected call of CallContract
func (mr *MockContractCallerMockRecorder) CallContract(ctx, url, msg, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContract", reflect.TypeOf((*MockContractCaller)(nil).CallContract), ctx, url, msg, blockNumber)
}

// PendingCallContract mocks base method
func (m *MockContractCaller) PendingCallContract(ctx context.Context, url string, msg *ethereum0.CallMsg) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingCallContract", ctx, url, msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingCallContract indicates an expected call of PendingCallContract
func (mr *MockContractCallerMockRecorder) PendingCallContract(ctx, url, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingCallContract", reflect.TypeOf((*MockContractCaller)(nil).PendingCallContract), ctx, url, msg)
}

// MockGasEstimator is a mock of GasEstimator interface
type MockGasEstimator struct {
	ctrl     *gomock.Controller
	recorder *MockGasEstimatorMockRecorder
}

// MockGasEstimatorMockRecorder is the mock recorder for MockGasEstimator
type MockGasEstimatorMockRecorder struct {
	mock *MockGasEstimator
}

// NewMockGasEstimator creates a new mock instance
func NewMockGasEstimator(ctrl *gomock.Controller) *MockGasEstimator {
	mock := &MockGasEstimator{ctrl: ctrl}
	mock.recorder = &MockGasEstimatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGasEstimator) EXPECT() *MockGasEstimatorMockRecorder {
	return m.recorder
}

// EstimateGas mocks base method
func (m *MockGasEstimator) EstimateGas(ctx context.Context, url string, msg *ethereum0.CallMsg) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", ctx, url, msg)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas
func (mr *MockGasEstimatorMockRecorder) EstimateGas(ctx, url, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockGasEstimator)(nil).EstimateGas), ctx, url, msg)
}

// MockGasPricer is a mock of GasPricer interface
type MockGasPricer struct {
	ctrl     *gomock.Controller
	recorder *MockGasPricerMockRecorder
}

// MockGasPricerMockRecorder is the mock recorder for MockGasPricer
type MockGasPricerMockRecorder struct {
	mock *MockGasPricer
}

// NewMockGasPricer creates a new mock instance
func NewMockGasPricer(ctrl *gomock.Controller) *MockGasPricer {
	mock := &MockGasPricer{ctrl: ctrl}
	mock.recorder = &MockGasPricerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGasPricer) EXPECT() *MockGasPricerMockRecorder {
	return m.recorder
}

// SuggestGasPrice mocks base method
func (m *MockGasPricer) SuggestGasPrice(ctx context.Context, url string) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestGasPrice", ctx, url)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestGasPrice indicates an expected call of SuggestGasPrice
func (mr *MockGasPricerMockRecorder) SuggestGasPrice(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestGasPrice", reflect.TypeOf((*MockGasPricer)(nil).SuggestGasPrice), ctx, url)
}

// FeeHistory mocks base method
func (m *MockGasPricer) FeeHistory(ctx context.Context, url string, blockCount int, newestBlock string) (*rpc.FeeHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeeHistory", ctx, url, blockCount, newestBlock)
	ret0, _ := ret[0].(*rpc.FeeHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeeHistory indicates an expected call of FeeHistory
func (mr *MockGasPricerMockRecorder) FeeHistory(ctx, url, blockCount, newestBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeeHistory", reflect.TypeOf((*MockGasPricer)(nil).FeeHistory), ctx, url, blockCount, newestBlock)
}

// MockChainSyncReader is a mock of ChainSyncReader interface
type MockChainSyncReader struct {
	ctrl     *gomock.Controller
	recorder *MockChainSyncReaderMockRecorder
}

// MockChainSyncReaderMockRecorder is the mock recorder for MockChainSyncReader
type MockChainSyncReaderMockRecorder struct {
	mock *MockChainSyncReader
}

// NewMockChainSyncReader creates a new mock instance
func NewMockChainSyncReader(ctrl *gomock.Controller) *MockChainSyncReader {
	mock := &MockChainSyncReader{ctrl: ctrl}
	mock.recorder = &MockChainSyncReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainSyncReader) EXPECT() *MockChainSyncReaderMockRecorder {
	return m.recorder
}

// Network mocks base method
func (m *MockChainSyncReader) Network(ctx context.Context, url string) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network", ctx, url)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Network indicates an expected call of Network
func (mr *MockChainSyncReaderMockRecorder) Network(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockChainSyncReader)(nil).Network), ctx, url)
}

// SyncProgress mocks base method
func (m *MockChainSyncReader) SyncProgress(ctx context.Context, url string) (*ethereum0.SyncProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncProgress", ctx, url)
	ret0, _ := ret[0].(*ethereum0.SyncProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncProgress indicates an expected call of SyncProgress
func (mr *MockChainSyncReaderMockRecorder) SyncProgress(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncProgress", reflect.TypeOf((*MockChainSyncReader)(nil).SyncProgress), ctx, url)
}

// MockMultiClient is a mock of MultiClient interface
type MockMultiClient struct {
	ctrl     *gomock.Controller
	recorder *MockMultiClientMockRecorder
}

// MockMultiClientMockRecorder is the mock recorder for MockMultiClient
type MockMultiClientMockRecorder struct {
	mock *MockMultiClient
}

// NewMockMultiClient creates a new mock instance
func NewMockMultiClient(ctrl *gomock.Controller) *MockMultiClient {
	mock := &MockMultiClient{ctrl: ctrl}
	mock.recorder = &MockMultiClientMockRecorder{mock}
	return mock
}

func (m *MockMultiClient) AddMiddleware(middleware transport.Middleware) {

}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMultiClient) EXPECT() *MockMultiClientMockRecorder {
	return m.recorder
}

// SendTransaction mocks base method
func (m *MockMultiClient) SendTransaction(ctx context.Context, url string, args *types.SendTxArgs) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransaction", ctx, url, args)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction
func (mr *MockMultiClientMockRecorder) SendTransaction(ctx, url, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockMultiClient)(nil).SendTransaction), ctx, url, args)
}

// SendRawTransaction mocks base method
func (m *MockMultiClient) SendRawTransaction(ctx context.Context, url string, raw hexutil.Bytes) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawTransaction", ctx, url, raw)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawTransaction indicates an expected call of SendRawTransaction
func (mr *MockMultiClientMockRecorder) SendRawTransaction(ctx, url, raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawTransaction", reflect.TypeOf((*MockMultiClient)(nil).SendRawTransaction), ctx, url, raw)
}

// SendRawPrivateTransaction mocks base method
func (m *MockMultiClient) SendRawPrivateTransaction(ctx context.Context, url string, raw hexutil.Bytes) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawPrivateTransaction", ctx, url, raw)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawPrivateTransaction indicates an expected call of SendRawPrivateTransaction
func (mr *MockMultiClientMockRecorder) SendRawPrivateTransaction(ctx, url, raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawPrivateTransaction", reflect.TypeOf((*MockMultiClient)(nil).SendRawPrivateTransaction), ctx, url, raw)
}

// BlockByHash mocks base method
func (m *MockMultiClient) BlockByHash(ctx context.Context, url string, hash common.Hash) (*types0.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByHash", ctx, url, hash)
	ret0, _ := ret[0].(*types0.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByHash indicates an expected call of BlockByHash
func (mr *MockMultiClientMockRecorder) BlockByHash(ctx, url, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByHash", reflect.TypeOf((*MockMultiClient)(nil).BlockByHash), ctx, url, hash)
}

// BlockByNumber mocks base method
func (m *MockMultiClient) BlockByNumber(ctx context.Context, url string, number *big.Int) (*types0.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByNumber", ctx, url, number)
	ret0, _ := ret[0].(*types0.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByNumber indicates an expected call of BlockByNumber
func (mr *MockMultiClientMockRecorder) BlockByNumber(ctx, url, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByNumber", reflect.TypeOf((*MockMultiClient)(nil).BlockByNumber), ctx, url, number)
}

// HeaderByHash mocks base method
func (m *MockMultiClient) HeaderByHash(ctx context.Context, url string, hash common.Hash) (*types0.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderByHash", ctx, url, hash)
	ret0, _ := ret[0].(*types0.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeaderByHash indicates an expected call of HeaderByHash
func (mr *MockMultiClientMockRecorder) HeaderByHash(ctx, url, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderByHash", reflect.TypeOf((*MockMultiClient)(nil).HeaderByHash), ctx, url, hash)
}

// HeaderByNumber mocks base method
func (m *MockMultiClient) HeaderByNumber(ctx context.Context, url string, number *big.Int) (*types0.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderByNumber", ctx, url, number)
	ret0, _ := ret[0].(*types0.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeaderByNumber indicates an expected call of HeaderByNumber
func (mr *MockMultiClientMockRecorder) HeaderByNumber(ctx, url, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderByNumber", reflect.TypeOf((*MockMultiClient)(nil).HeaderByNumber), ctx, url, number)
}

// TransactionByHash mocks base method
func (m *MockMultiClient) TransactionByHash(ctx context.Context, url string, hash common.Hash) (*types0.Transaction, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionByHash", ctx, url, hash)
	ret0, _ := ret[0].(*types0.Transaction)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TransactionByHash indicates an expected call of TransactionByHash
func (mr *MockMultiClientMockRecorder) TransactionByHash(ctx, url, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionByHash", reflect.TypeOf((*MockMultiClient)(nil).TransactionByHash), ctx, url, hash)
}

// TransactionReceipt mocks base method
func (m *MockMultiClient) TransactionReceipt(ctx context.Context, url string, txHash common.Hash) (*ethereum.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionReceipt", ctx, url, txHash)
	ret0, _ := ret[0].(*ethereum.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionReceipt indicates an expected call of TransactionReceipt
func (mr *MockMultiClientMockRecorder) TransactionReceipt(ctx, url, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionReceipt", reflect.TypeOf((*MockMultiClient)(nil).TransactionReceipt), ctx, url, txHash)
}

// BalanceAt mocks base method
func (m *MockMultiClient) BalanceAt(ctx context.Context, url string, account common.Address, blockNumber *big.Int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceAt", ctx, url, account, blockNumber)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceAt indicates an expected call of BalanceAt
func (mr *MockMultiClientMockRecorder) BalanceAt(ctx, url, account, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceAt", reflect.TypeOf((*MockMultiClient)(nil).BalanceAt), ctx, url, account, blockNumber)
}

// StorageAt mocks base method
func (m *MockMultiClient) StorageAt(ctx context.Context, url string, account common.Address, key common.Hash, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageAt", ctx, url, account, key, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageAt indicates an expected call of StorageAt
func (mr *MockMultiClientMockRecorder) StorageAt(ctx, url, account, key, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageAt", reflect.TypeOf((*MockMultiClient)(nil).StorageAt), ctx, url, account, key, blockNumber)
}

// CodeAt mocks base method
func (m *MockMultiClient) CodeAt(ctx context.Context, url string, account common.Address, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CodeAt", ctx, url, account, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CodeAt indicates an expected call of CodeAt
func (mr *MockMultiClientMockRecorder) CodeAt(ctx, url, account, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CodeAt", reflect.TypeOf((*MockMultiClient)(nil).CodeAt), ctx, url, account, blockNumber)
}

// NonceAt mocks base method
func (m *MockMultiClient) NonceAt(ctx context.Context, url string, account common.Address, blockNumber *big.Int) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NonceAt", ctx, url, account, blockNumber)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NonceAt indicates an expected call of NonceAt
func (mr *MockMultiClientMockRecorder) NonceAt(ctx, url, account, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NonceAt", reflect.TypeOf((*MockMultiClient)(nil).NonceAt), ctx, url, account, blockNumber)
}

// PendingBalanceAt mocks base method
func (m *MockMultiClient) PendingBalanceAt(ctx context.Context, url string, account common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingBalanceAt", ctx, url, account)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingBalanceAt indicates an expected call of PendingBalanceAt
func (mr *MockMultiClientMockRecorder) PendingBalanceAt(ctx, url, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingBalanceAt", reflect.TypeOf((*MockMultiClient)(nil).PendingBalanceAt), ctx, url, account)
}

// PendingStorageAt mocks base method
func (m *MockMultiClient) PendingStorageAt(ctx context.Context, url string, account common.Address, key common.Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingStorageAt", ctx, url, account, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingStorageAt indicates an expected call of PendingStorageAt
func (mr *MockMultiClientMockRecorder) PendingStorageAt(ctx, url, account, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingStorageAt", reflect.TypeOf((*MockMultiClient)(nil).PendingStorageAt), ctx, url, account, key)
}

// PendingCodeAt mocks base method
func (m *MockMultiClient) PendingCodeAt(ctx context.Context, url string, account common.Address) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingCodeAt", ctx, url, account)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingCodeAt indicates an expected call of PendingCodeAt
func (mr *MockMultiClientMockRecorder) PendingCodeAt(ctx, url, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingCodeAt", reflect.TypeOf((*MockMultiClient)(nil).PendingCodeAt), ctx, url, account)
}

// PendingNonceAt mocks base method
func (m *MockMultiClient) PendingNonceAt(ctx context.Context, url string, account common.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingNonceAt", ctx, url, account)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingNonceAt indicates an expected call of PendingNonceAt
func (mr *MockMultiClientMockRecorder) PendingNonceAt(ctx, url, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingNonceAt", reflect.TypeOf((*MockMultiClient)(nil).PendingNonceAt), ctx, url, account)
}

// CallContract mocks base method
func (m *MockMultiClient) CallContract(ctx context.Context, url string, msg *ethereum0.CallMsg, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContract", ctx, url, msg, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallContract indicates an expected call of CallContract
func (mr *MockMultiClientMockRecorder) CallContract(ctx, url, msg, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContract", reflect.TypeOf((*MockMultiClient)(nil).CallContract), ctx, url, msg, blockNumber)
}

// PendingCallContract mocks base method
func (m *MockMultiClient) PendingCallContract(ctx context.Context, url string, msg *ethereum0.CallMsg) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingCallContract", ctx, url, msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingCallContract indicates an expected call of PendingCallContract
func (mr *MockMultiClientMockRecorder) PendingCallContract(ctx, url, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingCallContract", reflect.TypeOf((*MockMultiClient)(nil).PendingCallContract), ctx, url, msg)
}

// EstimateGas mocks base method
func (m *MockMultiClient) EstimateGas(ctx context.Context, url string, msg *ethereum0.CallMsg) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", ctx, url, msg)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas
func (mr *MockMultiClientMockRecorder) EstimateGas(ctx, url, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockMultiClient)(nil).EstimateGas), ctx, url, msg)
}

// SuggestGasPrice mocks base method
func (m *MockMultiClient) SuggestGasPrice(ctx context.Context, url string) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestGasPrice", ctx, url)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestGasPrice indicates an expected call of SuggestGasPrice
func (mr *MockMultiClientMockRecorder) SuggestGasPrice(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestGasPrice", reflect.TypeOf((*MockMultiClient)(nil).SuggestGasPrice), ctx, url)
}

// FeeHistory mocks base method
func (m *MockMultiClient) FeeHistory(ctx context.Context, url string, blockCount int, newestBlock string) (*rpc.FeeHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeeHistory", ctx, url, blockCount, newestBlock)
	ret0, _ := ret[0].(*rpc.FeeHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeeHistory indicates an expected call of FeeHistory
func (mr *MockMultiClientMockRecorder) FeeHistory(ctx, url, blockCount, newestBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeeHistory", reflect.TypeOf((*MockMultiClient)(nil).FeeHistory), ctx, url, blockCount, newestBlock)
}

// Network mocks base method
func (m *MockMultiClient) Network(ctx context.Context, url string) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network", ctx, url)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Network indicates an expected call of Network
func (mr *MockMultiClientMockRecorder) Network(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockMultiClient)(nil).Network), ctx, url)
}

// SyncProgress mocks base method
func (m *MockMultiClient) SyncProgress(ctx context.Context, url string) (*ethereum0.SyncProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncProgress", ctx, url)
	ret0, _ := ret[0].(*ethereum0.SyncProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncProgress indicates an expected call of SyncProgress
func (mr *MockMultiClientMockRecorder) SyncProgress(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncProgress", reflect.TypeOf((*MockMultiClient)(nil).SyncProgress), ctx, url)
}

// PrivDistributeRawTransaction mocks base method
func (m *MockMultiClient) PrivDistributeRawTransaction(ctx context.Context, endpoint string, raw hexutil.Bytes) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivDistributeRawTransaction", ctx, endpoint, raw)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivDistributeRawTransaction indicates an expected call of PrivDistributeRawTransaction
func (mr *MockMultiClientMockRecorder) PrivDistributeRawTransaction(ctx, endpoint, raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivDistributeRawTransaction", reflect.TypeOf((*MockMultiClient)(nil).PrivDistributeRawTransaction), ctx, endpoint, raw)
}

// PrivCreatePrivacyGroup mocks base method
func (m *MockMultiClient) PrivCreatePrivacyGroup(ctx context.Context, endpoint string, addresses []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivCreatePrivacyGroup", ctx, endpoint, addresses)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivCreatePrivacyGroup indicates an expected call of PrivCreatePrivacyGroup
func (mr *MockMultiClientMockRecorder) PrivCreatePrivacyGroup(ctx, endpoint, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivCreatePrivacyGroup", reflect.TypeOf((*MockMultiClient)(nil).PrivCreatePrivacyGroup), ctx, endpoint, addresses)
}

// PrivateTransactionReceipt mocks base method
func (m *MockMultiClient) PrivateTransactionReceipt(ctx context.Context, url string, txHash common.Hash) (*ethereum.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateTransactionReceipt", ctx, url, txHash)
	ret0, _ := ret[0].(*ethereum.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivateTransactionReceipt indicates an expected call of PrivateTransactionReceipt
func (mr *MockMultiClientMockRecorder) PrivateTransactionReceipt(ctx, url, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateTransactionReceipt", reflect.TypeOf((*MockMultiClient)(nil).PrivateTransactionReceipt), ctx, url, txHash)
}

// PrivCodeAt mocks base method
func (m *MockMultiClient) PrivCodeAt(ctx context.Context, url string, account common.Address, privateGroupID string, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivCodeAt", ctx, url, account, privateGroupID, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivCodeAt indicates an expected call of PrivCodeAt
func (mr *MockMultiClientMockRecorder) PrivCodeAt(ctx, url, account, privateGroupID, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivCodeAt", reflect.TypeOf((*MockMultiClient)(nil).PrivCodeAt), ctx, url, account, privateGroupID, blockNumber)
}

// PrivEEANonce mocks base method
func (m *MockMultiClient) PrivEEANonce(ctx context.Context, endpoint string, account common.Address, privateFrom string, privateFor []string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivEEANonce", ctx, endpoint, account, privateFrom, privateFor)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivEEANonce indicates an expected call of PrivEEANonce
func (mr *MockMultiClientMockRecorder) PrivEEANonce(ctx, endpoint, account, privateFrom, privateFor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivEEANonce", reflect.TypeOf((*MockMultiClient)(nil).PrivEEANonce), ctx, endpoint, account, privateFrom, privateFor)
}

// PrivNonce mocks base method
func (m *MockMultiClient) PrivNonce(ctx context.Context, endpoint string, account common.Address, privacyGroupID string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivNonce", ctx, endpoint, account, privacyGroupID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivNonce indicates an expected call of PrivNonce
func (mr *MockMultiClientMockRecorder) PrivNonce(ctx, endpoint, account, privacyGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivNonce", reflect.TypeOf((*MockMultiClient)(nil).PrivNonce), ctx, endpoint, account, privacyGroupID)
}

// PrivFindPrivacyGroup mocks base method
func (m *MockMultiClient) PrivFindPrivacyGroup(ctx context.Context, endpoint string, members []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivFindPrivacyGroup", ctx, endpoint, members)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivFindPrivacyGroup indicates an expected call of PrivFindPrivacyGroup
func (mr *MockMultiClientMockRecorder) PrivFindPrivacyGroup(ctx, endpoint, members interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivFindPrivacyGroup", reflect.TypeOf((*MockMultiClient)(nil).PrivFindPrivacyGroup), ctx, endpoint, members)
}

// EEAPrivPrecompiledContractAddr mocks base method
func (m *MockMultiClient) EEAPrivPrecompiledContractAddr(ctx context.Context, endpoint string) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EEAPrivPrecompiledContractAddr", ctx, endpoint)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EEAPrivPrecompiledContractAddr indicates an expected call of EEAPrivPrecompiledContractAddr
func (mr *MockMultiClientMockRecorder) EEAPrivPrecompiledContractAddr(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EEAPrivPrecompiledContractAddr", reflect.TypeOf((*MockMultiClient)(nil).EEAPrivPrecompiledContractAddr), ctx, endpoint)
}

// SendQuorumRawPrivateTransaction mocks base method
func (m *MockMultiClient) SendQuorumRawPrivateTransaction(ctx context.Context, url string, raw hexutil.Bytes, privateFor, mandatoryFor []string, privacyFlag int) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendQuorumRawPrivateTransaction", ctx, url, raw, privateFor, mandatoryFor, privacyFlag)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendQuorumRawPrivateTransaction indicates an expected call of SendQuorumRawPrivateTransaction
func (mr *MockMultiClientMockRecorder) SendQuorumRawPrivateTransaction(ctx, url, raw, privateFor, mandatoryFor, privacyFlag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendQuorumRawPrivateTransaction", reflect.TypeOf((*MockMultiClient)(nil).SendQuorumRawPrivateTransaction), ctx, url, raw, privateFor, mandatoryFor, privacyFlag)
}

// StoreRaw mocks base method
func (m *MockMultiClient) StoreRaw(ctx context.Context, endpoint string, data hexutil.Bytes, privateFrom string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRaw", ctx, endpoint, data, privateFrom)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreRaw indicates an expected call of StoreRaw
func (mr *MockMultiClientMockRecorder) StoreRaw(ctx, endpoint, data, privateFrom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRaw", reflect.TypeOf((*MockMultiClient)(nil).StoreRaw), ctx, endpoint, data, privateFrom)
}

// GetStatus mocks base method
func (m *MockMultiClient) GetStatus(ctx context.Context, endpoint string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, endpoint)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockMultiClientMockRecorder) GetStatus(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockMultiClient)(nil).GetStatus), ctx, endpoint)
}

// Call mocks base method
func (m *MockMultiClient) Call(ctx context.Context, endpoint string, processResult func(json.RawMessage) error, method string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, endpoint, processResult, method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call
func (mr *MockMultiClientMockRecorder) Call(ctx, endpoint, processResult, method interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, endpoint, processResult, method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockMultiClient)(nil).Call), varargs...)
}

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

func (m *MockClient) AddMiddleware(middleware transport.Middleware) {
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// SendTransaction mocks base method
func (m *MockClient) SendTransaction(ctx context.Context, url string, args *types.SendTxArgs) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransaction", ctx, url, args)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction
func (mr *MockClientMockRecorder) SendTransaction(ctx, url, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockClient)(nil).SendTransaction), ctx, url, args)
}

// SendRawTransaction mocks base method
func (m *MockClient) SendRawTransaction(ctx context.Context, url string, raw hexutil.Bytes) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawTransaction", ctx, url, raw)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawTransaction indicates an expected call of SendRawTransaction
func (mr *MockClientMockRecorder) SendRawTransaction(ctx, url, raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawTransaction", reflect.TypeOf((*MockClient)(nil).SendRawTransaction), ctx, url, raw)
}

// SendRawPrivateTransaction mocks base method
func (m *MockClient) SendRawPrivateTransaction(ctx context.Context, url string, raw hexutil.Bytes) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawPrivateTransaction", ctx, url, raw)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawPrivateTransaction indicates an expected call of SendRawPrivateTransaction
func (mr *MockClientMockRecorder) SendRawPrivateTransaction(ctx, url, raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawPrivateTransaction", reflect.TypeOf((*MockClient)(nil).SendRawPrivateTransaction), ctx, url, raw)
}

// BlockByHash mocks base method
func (m *MockClient) BlockByHash(ctx context.Context, url string, hash common.Hash) (*types0.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByHash", ctx, url, hash)
	ret0, _ := ret[0].(*types0.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByHash indicates an expected call of BlockByHash
func (mr *MockClientMockRecorder) BlockByHash(ctx, url, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByHash", reflect.TypeOf((*MockClient)(nil).BlockByHash), ctx, url, hash)
}

// BlockByNumber mocks base method
func (m *MockClient) BlockByNumber(ctx context.Context, url string, number *big.Int) (*types0.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByNumber", ctx, url, number)
	ret0, _ := ret[0].(*types0.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByNumber indicates an expected call of BlockByNumber
func (mr *MockClientMockRecorder) BlockByNumber(ctx, url, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByNumber", reflect.TypeOf((*MockClient)(nil).BlockByNumber), ctx, url, number)
}

// HeaderByHash mocks base method
func (m *MockClient) HeaderByHash(ctx context.Context, url string, hash common.Hash) (*types0.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderByHash", ctx, url, hash)
	ret0, _ := ret[0].(*types0.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeaderByHash indicates an expected call of HeaderByHash
func (mr *MockClientMockRecorder) HeaderByHash(ctx, url, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderByHash", reflect.TypeOf((*MockClient)(nil).HeaderByHash), ctx, url, hash)
}

// HeaderByNumber mocks base method
func (m *MockClient) HeaderByNumber(ctx context.Context, url string, number *big.Int) (*types0.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderByNumber", ctx, url, number)
	ret0, _ := ret[0].(*types0.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeaderByNumber indicates an expected call of HeaderByNumber
func (mr *MockClientMockRecorder) HeaderByNumber(ctx, url, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderByNumber", reflect.TypeOf((*MockClient)(nil).HeaderByNumber), ctx, url, number)
}

// TransactionByHash mocks base method
func (m *MockClient) TransactionByHash(ctx context.Context, url string, hash common.Hash) (*types0.Transaction, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionByHash", ctx, url, hash)
	ret0, _ := ret[0].(*types0.Transaction)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TransactionByHash indicates an expected call of TransactionByHash
func (mr *MockClientMockRecorder) TransactionByHash(ctx, url, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionByHash", reflect.TypeOf((*MockClient)(nil).TransactionByHash), ctx, url, hash)
}

// TransactionReceipt mocks base method
func (m *MockClient) TransactionReceipt(ctx context.Context, url string, txHash common.Hash) (*ethereum.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionReceipt", ctx, url, txHash)
	ret0, _ := ret[0].(*ethereum.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionReceipt indicates an expected call of TransactionReceipt
func (mr *MockClientMockRecorder) TransactionReceipt(ctx, url, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionReceipt", reflect.TypeOf((*MockClient)(nil).TransactionReceipt), ctx, url, txHash)
}

// BalanceAt mocks base method
func (m *MockClient) BalanceAt(ctx context.Context, url string, account common.Address, blockNumber *big.Int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceAt", ctx, url, account, blockNumber)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceAt indicates an expected call of BalanceAt
func (mr *MockClientMockRecorder) BalanceAt(ctx, url, account, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceAt", reflect.TypeOf((*MockClient)(nil).BalanceAt), ctx, url, account, blockNumber)
}

// StorageAt mocks base method
func (m *MockClient) StorageAt(ctx context.Context, url string, account common.Address, key common.Hash, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageAt", ctx, url, account, key, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageAt indicates an expected call of StorageAt
func (mr *MockClientMockRecorder) StorageAt(ctx, url, account, key, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageAt", reflect.TypeOf((*MockClient)(nil).StorageAt), ctx, url, account, key, blockNumber)
}

// CodeAt mocks base method
func (m *MockClient) CodeAt(ctx context.Context, url string, account common.Address, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CodeAt", ctx, url, account, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CodeAt indicates an expected call of CodeAt
func (mr *MockClientMockRecorder) CodeAt(ctx, url, account, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CodeAt", reflect.TypeOf((*MockClient)(nil).CodeAt), ctx, url, account, blockNumber)
}

// NonceAt mocks base method
func (m *MockClient) NonceAt(ctx context.Context, url string, account common.Address, blockNumber *big.Int) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NonceAt", ctx, url, account, blockNumber)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NonceAt indicates an expected call of NonceAt
func (mr *MockClientMockRecorder) NonceAt(ctx, url, account, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NonceAt", reflect.TypeOf((*MockClient)(nil).NonceAt), ctx, url, account, blockNumber)
}

// PendingBalanceAt mocks base method
func (m *MockClient) PendingBalanceAt(ctx context.Context, url string, account common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingBalanceAt", ctx, url, account)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingBalanceAt indicates an expected call of PendingBalanceAt
func (mr *MockClientMockRecorder) PendingBalanceAt(ctx, url, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingBalanceAt", reflect.TypeOf((*MockClient)(nil).PendingBalanceAt), ctx, url, account)
}

// PendingStorageAt mocks base method
func (m *MockClient) PendingStorageAt(ctx context.Context, url string, account common.Address, key common.Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingStorageAt", ctx, url, account, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingStorageAt indicates an expected call of PendingStorageAt
func (mr *MockClientMockRecorder) PendingStorageAt(ctx, url, account, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingStorageAt", reflect.TypeOf((*MockClient)(nil).PendingStorageAt), ctx, url, account, key)
}

// PendingCodeAt mocks base method
func (m *MockClient) PendingCodeAt(ctx context.Context, url string, account common.Address) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingCodeAt", ctx, url, account)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingCodeAt indicates an expected call of PendingCodeAt
func (mr *MockClientMockRecorder) PendingCodeAt(ctx, url, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingCodeAt", reflect.TypeOf((*MockClient)(nil).PendingCodeAt), ctx, url, account)
}

// PendingNonceAt mocks base method
func (m *MockClient) PendingNonceAt(ctx context.Context, url string, account common.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingNonceAt", ctx, url, account)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingNonceAt indicates an expected call of PendingNonceAt
func (mr *MockClientMockRecorder) PendingNonceAt(ctx, url, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingNonceAt", reflect.TypeOf((*MockClient)(nil).PendingNonceAt), ctx, url, account)
}

// CallContract mocks base method
func (m *MockClient) CallContract(ctx context.Context, url string, msg *ethereum0.CallMsg, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContract", ctx, url, msg, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallContract indicates an expected call of CallContract
func (mr *MockClientMockRecorder) CallContract(ctx, url, msg, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContract", reflect.TypeOf((*MockClient)(nil).CallContract), ctx, url, msg, blockNumber)
}

// PendingCallContract mocks base method
func (m *MockClient) PendingCallContract(ctx context.Context, url string, msg *ethereum0.CallMsg) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingCallContract", ctx, url, msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingCallContract indicates an expected call of PendingCallContract
func (mr *MockClientMockRecorder) PendingCallContract(ctx, url, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingCallContract", reflect.TypeOf((*MockClient)(nil).PendingCallContract), ctx, url, msg)
}

// EstimateGas mocks base method
func (m *MockClient) EstimateGas(ctx context.Context, url string, msg *ethereum0.CallMsg) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", ctx, url, msg)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas
func (mr *MockClientMockRecorder) EstimateGas(ctx, url, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockClient)(nil).EstimateGas), ctx, url, msg)
}

// SuggestGasPrice mocks base method
func (m *MockClient) SuggestGasPrice(ctx context.Context, url string) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestGasPrice", ctx, url)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestGasPrice indicates an expected call of SuggestGasPrice
func (mr *MockClientMockRecorder) SuggestGasPrice(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestGasPrice", reflect.TypeOf((*MockClient)(nil).SuggestGasPrice), ctx, url)
}

// FeeHistory mocks base method
func (m *MockClient) FeeHistory(ctx context.Context, url string, blockCount int, newestBlock string) (*rpc.FeeHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeeHistory", ctx, url, blockCount, newestBlock)
	ret0, _ := ret[0].(*rpc.FeeHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeeHistory indicates an expected call of FeeHistory
func (mr *MockClientMockRecorder) FeeHistory(ctx, url, blockCount, newestBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeeHistory", reflect.TypeOf((*MockClient)(nil).FeeHistory), ctx, url, blockCount, newestBlock)
}

// Network mocks base method
func (m *MockClient) Network(ctx context.Context, url string) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network", ctx, url)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Network indicates an expected call of Network
func (mr *MockClientMockRecorder) Network(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockClient)(nil).Network), ctx, url)
}

// SyncProgress mocks base method
func (m *MockClient) SyncProgress(ctx context.Context, url string) (*ethereum0.SyncProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncProgress", ctx, url)
	ret0, _ := ret[0].(*ethereum0.SyncProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncProgress indicates an expected call of SyncProgress
func (mr *MockClientMockRecorder) SyncProgress(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncProgress", reflect.TypeOf((*MockClient)(nil).SyncProgress), ctx, url)
}

// Call mocks base method
func (m *MockClient) Call(ctx context.Context, endpoint string, processResult func(json.RawMessage) error, method string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, endpoint, processResult, method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call
func (mr *MockClientMockRecorder) Call(ctx, endpoint, processResult, method interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, endpoint, processResult, method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockClient)(nil).Call), varargs...)
}

// MockEEAClient is a mock of EEAClient interface
type MockEEAClient struct {
	ctrl     *gomock.Controller
	recorder *MockEEAClientMockRecorder
}

// MockEEAClientMockRecorder is the mock recorder for MockEEAClient
type MockEEAClientMockRecorder struct {
	mock *MockEEAClient
}

// NewMockEEAClient creates a new mock instance
func NewMockEEAClient(ctrl *gomock.Controller) *MockEEAClient {
	mock := &MockEEAClient{ctrl: ctrl}
	mock.recorder = &MockEEAClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEEAClient) EXPECT() *MockEEAClientMockRecorder {
	return m.recorder
}

// CallContract mocks base method
func (m *MockEEAClient) CallContract(ctx context.Context, url string, msg *ethereum0.CallMsg, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContract", ctx, url, msg, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallContract indicates an expected call of CallContract
func (mr *MockEEAClientMockRecorder) CallContract(ctx, url, msg, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContract", reflect.TypeOf((*MockEEAClient)(nil).CallContract), ctx, url, msg, blockNumber)
}

// PendingCallContract mocks base method
func (m *MockEEAClient) PendingCallContract(ctx context.Context, url string, msg *ethereum0.CallMsg) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingCallContract", ctx, url, msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingCallContract indicates an expected call of PendingCallContract
func (mr *MockEEAClientMockRecorder) PendingCallContract(ctx, url, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingCallContract", reflect.TypeOf((*MockEEAClient)(nil).PendingCallContract), ctx, url, msg)
}

// EstimateGas mocks base method
func (m *MockEEAClient) EstimateGas(ctx context.Context, url string, msg *ethereum0.CallMsg) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", ctx, url, msg)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas
func (mr *MockEEAClientMockRecorder) EstimateGas(ctx, url, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockEEAClient)(nil).EstimateGas), ctx, url, msg)
}

// SuggestGasPrice mocks base method
func (m *MockEEAClient) SuggestGasPrice(ctx context.Context, url string) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestGasPrice", ctx, url)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestGasPrice indicates an expected call of SuggestGasPrice
func (mr *MockEEAClientMockRecorder) SuggestGasPrice(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestGasPrice", reflect.TypeOf((*MockEEAClient)(nil).SuggestGasPrice), ctx, url)
}

// FeeHistory mocks base method
func (m *MockEEAClient) FeeHistory(ctx context.Context, url string, blockCount int, newestBlock string) (*rpc.FeeHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeeHistory", ctx, url, blockCount, newestBlock)
	ret0, _ := ret[0].(*rpc.FeeHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeeHistory indicates an expected call of FeeHistory
func (mr *MockEEAClientMockRecorder) FeeHistory(ctx, url, blockCount, newestBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeeHistory", reflect.TypeOf((*MockEEAClient)(nil).FeeHistory), ctx, url, blockCount, newestBlock)
}

// Network mocks base method
func (m *MockEEAClient) Network(ctx context.Context, url string) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network", ctx, url)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Network indicates an expected call of Network
func (mr *MockEEAClientMockRecorder) Network(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockEEAClient)(nil).Network), ctx, url)
}

// SyncProgress mocks base method
func (m *MockEEAClient) SyncProgress(ctx context.Context, url string) (*ethereum0.SyncProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncProgress", ctx, url)
	ret0, _ := ret[0].(*ethereum0.SyncProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncProgress indicates an expected call of SyncProgress
func (mr *MockEEAClientMockRecorder) SyncProgress(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncProgress", reflect.TypeOf((*MockEEAClient)(nil).SyncProgress), ctx, url)
}

// PrivDistributeRawTransaction mocks base method
func (m *MockEEAClient) PrivDistributeRawTransaction(ctx context.Context, endpoint string, raw hexutil.Bytes) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivDistributeRawTransaction", ctx, endpoint, raw)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivDistributeRawTransaction indicates an expected call of PrivDistributeRawTransaction
func (mr *MockEEAClientMockRecorder) PrivDistributeRawTransaction(ctx, endpoint, raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivDistributeRawTransaction", reflect.TypeOf((*MockEEAClient)(nil).PrivDistributeRawTransaction), ctx, endpoint, raw)
}

// PrivCreatePrivacyGroup mocks base method
func (m *MockEEAClient) PrivCreatePrivacyGroup(ctx context.Context, endpoint string, addresses []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivCreatePrivacyGroup", ctx, endpoint, addresses)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivCreatePrivacyGroup indicates an expected call of PrivCreatePrivacyGroup
func (mr *MockEEAClientMockRecorder) PrivCreatePrivacyGroup(ctx, endpoint, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivCreatePrivacyGroup", reflect.TypeOf((*MockEEAClient)(nil).PrivCreatePrivacyGroup), ctx, endpoint, addresses)
}

// PrivateTransactionReceipt mocks base method
func (m *MockEEAClient) PrivateTransactionReceipt(ctx context.Context, url string, txHash common.Hash) (*ethereum.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateTransactionReceipt", ctx, url, txHash)
	ret0, _ := ret[0].(*ethereum.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivateTransactionReceipt indicates an expected call of PrivateTransactionReceipt
func (mr *MockEEAClientMockRecorder) PrivateTransactionReceipt(ctx, url, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateTransactionReceipt", reflect.TypeOf((*MockEEAClient)(nil).PrivateTransactionReceipt), ctx, url, txHash)
}

// PrivCodeAt mocks base method
func (m *MockEEAClient) PrivCodeAt(ctx context.Context, url string, account common.Address, privateGroupID string, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivCodeAt", ctx, url, account, privateGroupID, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivCodeAt indicates an expected call of PrivCodeAt
func (mr *MockEEAClientMockRecorder) PrivCodeAt(ctx, url, account, privateGroupID, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivCodeAt", reflect.TypeOf((*MockEEAClient)(nil).PrivCodeAt), ctx, url, account, privateGroupID, blockNumber)
}

// PrivEEANonce mocks base method
func (m *MockEEAClient) PrivEEANonce(ctx context.Context, endpoint string, account common.Address, privateFrom string, privateFor []string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivEEANonce", ctx, endpoint, account, privateFrom, privateFor)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivEEANonce indicates an expected call of PrivEEANonce
func (mr *MockEEAClientMockRecorder) PrivEEANonce(ctx, endpoint, account, privateFrom, privateFor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivEEANonce", reflect.TypeOf((*MockEEAClient)(nil).PrivEEANonce), ctx, endpoint, account, privateFrom, privateFor)
}

// PrivNonce mocks base method
func (m *MockEEAClient) PrivNonce(ctx context.Context, endpoint string, account common.Address, privacyGroupID string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivNonce", ctx, endpoint, account, privacyGroupID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivNonce indicates an expected call of PrivNonce
func (mr *MockEEAClientMockRecorder) PrivNonce(ctx, endpoint, account, privacyGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivNonce", reflect.TypeOf((*MockEEAClient)(nil).PrivNonce), ctx, endpoint, account, privacyGroupID)
}

// PrivFindPrivacyGroup mocks base method
func (m *MockEEAClient) PrivFindPrivacyGroup(ctx context.Context, endpoint string, members []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivFindPrivacyGroup", ctx, endpoint, members)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivFindPrivacyGroup indicates an expected call of PrivFindPrivacyGroup
func (mr *MockEEAClientMockRecorder) PrivFindPrivacyGroup(ctx, endpoint, members interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivFindPrivacyGroup", reflect.TypeOf((*MockEEAClient)(nil).PrivFindPrivacyGroup), ctx, endpoint, members)
}

// EEAPrivPrecompiledContractAddr mocks base method
func (m *MockEEAClient) EEAPrivPrecompiledContractAddr(ctx context.Context, endpoint string) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EEAPrivPrecompiledContractAddr", ctx, endpoint)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EEAPrivPrecompiledContractAddr indicates an expected call of EEAPrivPrecompiledContractAddr
func (mr *MockEEAClientMockRecorder) EEAPrivPrecompiledContractAddr(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EEAPrivPrecompiledContractAddr", reflect.TypeOf((*MockEEAClient)(nil).EEAPrivPrecompiledContractAddr), ctx, endpoint)
}

// MockQuorumClient is a mock of QuorumClient interface
type MockQuorumClient struct {
	ctrl     *gomock.Controller
	recorder *MockQuorumClientMockRecorder
}

// MockQuorumClientMockRecorder is the mock recorder for MockQuorumClient
type MockQuorumClientMockRecorder struct {
	mock *MockQuorumClient
}

// NewMockQuorumClient creates a new mock instance
func NewMockQuorumClient(ctrl *gomock.Controller) *MockQuorumClient {
	mock := &MockQuorumClient{ctrl: ctrl}
	mock.recorder = &MockQuorumClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuorumClient) EXPECT() *MockQuorumClientMockRecorder {
	return m.recorder
}

// CallContract mocks base method
func (m *MockQuorumClient) CallContract(ctx context.Context, url string, msg *ethereum0.CallMsg, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContract", ctx, url, msg, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallContract indicates an expected call of CallContract
func (mr *MockQuorumClientMockRecorder) CallContract(ctx, url, msg, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContract", reflect.TypeOf((*MockQuorumClient)(nil).CallContract), ctx, url, msg, blockNumber)
}

// PendingCallContract mocks base method
func (m *MockQuorumClient) PendingCallContract(ctx context.Context, url string, msg *ethereum0.CallMsg) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingCallContract", ctx, url, msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingCallContract indicates an expected call of PendingCallContract
func (mr *MockQuorumClientMockRecorder) PendingCallContract(ctx, url, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingCallContract", reflect.TypeOf((*MockQuorumClient)(nil).PendingCallContract), ctx, url, msg)
}

// EstimateGas mocks base method
func (m *MockQuorumClient) EstimateGas(ctx context.Context, url string, msg *ethereum0.CallMsg) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", ctx, url, msg)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas
func (mr *MockQuorumClientMockRecorder) EstimateGas(ctx, url, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockQuorumClient)(nil).EstimateGas), ctx, url, msg)
}

// SuggestGasPrice mocks base method
func (m *MockQuorumClient) SuggestGasPrice(ctx context.Context, url string) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestGasPrice", ctx, url)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestGasPrice indicates an expected call of SuggestGasPrice
func (mr *MockQuorumClientMockRecorder) SuggestGasPrice(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestGasPrice", reflect.TypeOf((*MockQuorumClient)(nil).SuggestGasPrice), ctx, url)
}

// FeeHistory mocks base method
func (m *MockQuorumClient) FeeHistory(ctx context.Context, url string, blockCount int, newestBlock string) (*rpc.FeeHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeeHistory", ctx, url, blockCount, newestBlock)
	ret0, _ := ret[0].(*rpc.FeeHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeeHistory indicates an expected call of FeeHistory
func (mr *MockQuorumClientMockRecorder) FeeHistory(ctx, url, blockCount, newestBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeeHistory", reflect.TypeOf((*MockQuorumClient)(nil).FeeHistory), ctx, url, blockCount, newestBlock)
}

// Network mocks base method
func (m *MockQuorumClient) Network(ctx context.Context, url string) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network", ctx, url)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Network indicates an expected call of Network
func (mr *MockQuorumClientMockRecorder) Network(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockQuorumClient)(nil).Network), ctx, url)
}

// SyncProgress mocks base method
func (m *MockQuorumClient) SyncProgress(ctx context.Context, url string) (*ethereum0.SyncProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncProgress", ctx, url)
	ret0, _ := ret[0].(*ethereum0.SyncProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncProgress indicates an expected call of SyncProgress
func (mr *MockQuorumClientMockRecorder) SyncProgress(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncProgress", reflect.TypeOf((*MockQuorumClient)(nil).SyncProgress), ctx, url)
}

// BlockByHash mocks base method
func (m *MockQuorumClient) BlockByHash(ctx context.Context, url string, hash common.Hash) (*types0.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByHash", ctx, url, hash)
	ret0, _ := ret[0].(*types0.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByHash indicates an expected call of BlockByHash
func (mr *MockQuorumClientMockRecorder) BlockByHash(ctx, url, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByHash", reflect.TypeOf((*MockQuorumClient)(nil).BlockByHash), ctx, url, hash)
}

// BlockByNumber mocks base method
func (m *MockQuorumClient) BlockByNumber(ctx context.Context, url string, number *big.Int) (*types0.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByNumber", ctx, url, number)
	ret0, _ := ret[0].(*types0.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByNumber indicates an expected call of BlockByNumber
func (mr *MockQuorumClientMockRecorder) BlockByNumber(ctx, url, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByNumber", reflect.TypeOf((*MockQuorumClient)(nil).BlockByNumber), ctx, url, number)
}

// HeaderByHash mocks base method
func (m *MockQuorumClient) HeaderByHash(ctx context.Context, url string, hash common.Hash) (*types0.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderByHash", ctx, url, hash)
	ret0, _ := ret[0].(*types0.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeaderByHash indicates an expected call of HeaderByHash
func (mr *MockQuorumClientMockRecorder) HeaderByHash(ctx, url, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderByHash", reflect.TypeOf((*MockQuorumClient)(nil).HeaderByHash), ctx, url, hash)
}

// HeaderByNumber mocks base method
func (m *MockQuorumClient) HeaderByNumber(ctx context.Context, url string, number *big.Int) (*types0.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderByNumber", ctx, url, number)
	ret0, _ := ret[0].(*types0.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeaderByNumber indicates an expected call of HeaderByNumber
func (mr *MockQuorumClientMockRecorder) HeaderByNumber(ctx, url, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderByNumber", reflect.TypeOf((*MockQuorumClient)(nil).HeaderByNumber), ctx, url, number)
}

// TransactionByHash mocks base method
func (m *MockQuorumClient) TransactionByHash(ctx context.Context, url string, hash common.Hash) (*types0.Transaction, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionByHash", ctx, url, hash)
	ret0, _ := ret[0].(*types0.Transaction)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TransactionByHash indicates an expected call of TransactionByHash
func (mr *MockQuorumClientMockRecorder) TransactionByHash(ctx, url, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionByHash", reflect.TypeOf((*MockQuorumClient)(nil).TransactionByHash), ctx, url, hash)
}

// TransactionReceipt mocks base method
func (m *MockQuorumClient) TransactionReceipt(ctx context.Context, url string, txHash common.Hash) (*ethereum.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionReceipt", ctx, url, txHash)
	ret0, _ := ret[0].(*ethereum.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionReceipt indicates an expected call of TransactionReceipt
func (mr *MockQuorumClientMockRecorder) TransactionReceipt(ctx, url, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionReceipt", reflect.TypeOf((*MockQuorumClient)(nil).TransactionReceipt), ctx, url, txHash)
}

// SendQuorumRawPrivateTransaction mocks base method
func (m *MockQuorumClient) SendQuorumRawPrivateTransaction(ctx context.Context, url string, raw hexutil.Bytes, privateFor, mandatoryFor []string, privacyFlag int) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendQuorumRawPrivateTransaction", ctx, url, raw, privateFor, mandatoryFor, privacyFlag)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendQuorumRawPrivateTransaction indicates an expected call of SendQuorumRawPrivateTransaction
func (mr *MockQuorumClientMockRecorder) SendQuorumRawPrivateTransaction(ctx, url, raw, privateFor, mandatoryFor, privacyFlag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendQuorumRawPrivateTransaction", reflect.TypeOf((*MockQuorumClient)(nil).SendQuorumRawPrivateTransaction), ctx, url, raw, privateFor, mandatoryFor, privacyFlag)
}

// StoreRaw mocks base method
func (m *MockQuorumClient) StoreRaw(ctx context.Context, endpoint string, data hexutil.Bytes, privateFrom string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRaw", ctx, endpoint, data, privateFrom)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreRaw indicates an expected call of StoreRaw
func (mr *MockQuorumClientMockRecorder) StoreRaw(ctx, endpoint, data, privateFrom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRaw", reflect.TypeOf((*MockQuorumClient)(nil).StoreRaw), ctx, endpoint, data, privateFrom)
}

// GetStatus mocks base method
func (m *MockQuorumClient) GetStatus(ctx context.Context, endpoint string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, endpoint)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockQuorumClientMockRecorder) GetStatus(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockQuorumClient)(nil).GetStatus), ctx, endpoint)
}
