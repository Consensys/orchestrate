version: '3.7'

x-container-common: &container-common
  restart: ${CONTAINER_RESTART-on-failure}
  networks:
    - orchestrate

x-qkm-common: &qkm-common
  DB_HOST: ${DB_HOST-postgres}
  DB_PASSWORD: ${DB_HOST-postgres}
  DB_PORT: ${DB_PORT-}
  LOG_LEVEL: ${LOG_LEVEL-}
  LOG_FORMAT: ${LOG_FORMAT-}

x-postgres-common: &postgres-common
  environment:
    POSTGRES_PASSWORD: postgres

services:
  zookeeper:
    <<: *container-common
    image: confluentinc/cp-zookeeper:5.4.3
    ports:
      - ${ZOOKEEPER_EXTERNAL_PORT-2181}:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT-32181}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME-2000}

  kafka:
    <<: *container-common
    image: confluentinc/cp-kafka:5.4.3
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_EXTERNAL_PORT-9092}:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_NUM_PARTITIONS: ${KAFKA_NUM_PARTITIONS-3}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT-32181}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://${KAFKA_EXTERNAL_HOSTNAME-localhost}:${KAFKA_EXTERNAL_PORT-9092}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:9092"]
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 5s

  redis:
    <<: *container-common
    image: redis:6.0-alpine
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - 6379:6379
    volumes:
      - ./redis/config/redis.conf:/usr/local/etc/redis/redis.conf

  #  redis:
  #    <<: *container-common
  #    build: ./redis
  #    user: root
  #    ports:
  #      - 6379:6379
  #      - 6378:6378
  #    volumes:
  #      - ./redis/config/stunnel.conf:/etc/stunnel/stunnel.conf
  #      - ./redis/config/redis-auth.conf:/etc/redis/redis.conf
  #      - ./redis/init.sh:/init.sh
  #    command: sh /init.sh

  postgres-unit:
    <<: *container-common
    <<: *postgres-common
    image: postgres:13.4-alpine
    command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr", "-c", "log_connections=1", "-c", "log_disconnections=1"]
    ports:
      - 5432:5432
    volumes:
      - db-data-postgres-unit:/var/lib/postgresql/data

  postgres:
    <<: *container-common
    <<: *postgres-common
    image: postgres:13.4-alpine
    command: ["postgres", "-c", "log_statement=all"]
    volumes:
      - db-data-api:/var/lib/postgresql/data
    ports:
      - 5432

  vault:
    <<: *container-common
    image: consensys/quorum-hashicorp-vault-plugin:v1.1.4
    tty: true
    restart: "no"
    cap_add:
      - IPC_LOCK
    volumes:
      - vault-token:/vault/token
      - ./hashicorp/config.hcl:/vault/config.hcl:ro
    environment:
      ROOT_TOKEN_PATH: /vault/token/.root
      VAULT_ADDR: http://vault:8200
      PLUGIN_MOUNT_PATH: quorum
      PLUGIN_PATH: /vault/plugins
      VAULT_IS_READY: /vault/token/.ready
    entrypoint:
      - sh
      - -c
      - |
        ( sleep 2 && vault-init.sh && cat > $${VAULT_IS_READY} ) &
         vault server -config=/vault/config.hcl
    ports:
      - 8200:8200
    healthcheck:
      test: [ "CMD", "wget", "--spider", "--proxy", "off", "http://vault:8200/v1/sys/health?standbyok=true" ]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 5s

  vault-agent:
    <<: *container-common
    image: consensys/quorum-hashicorp-vault-plugin:v1.1.4
    tty: true
    depends_on:
      - vault
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_ADDR: http://vault:8200
      ROOT_TOKEN_PATH: /vault/token/.root
      PLUGIN_MOUNT_PATH: orchestrate
      VAULT_IS_READY: /vault/token/.ready
      SECRET_FILE_PATH: /vault/token/secret
      ROLE_FILE_PATH: /vault/token/role
      APP_ROLE_ID: orchestrate
      APP_ROLE_POLICIES: '["allow_keys"]'
      POLICY_ID: allow_keys
    volumes:
      - vault-token:/vault/token
      - ./hashicorp/agent-config.hcl:/vault/config.hcl:ro
    entrypoint:
      - sh
      - -c
      - |

        until [ -f $${VAULT_IS_READY} ]; do
          echo "[AGENT] waiting for vault to be ready..."
          sleep 1
        done

        vault-agent-init.sh
        vault agent -config=/vault/config.hcl

  quorum-key-manager-migration:
    <<: *container-common
    image: consensys/quorum-key-manager:v21.12.5
    environment:
      <<: *qkm-common
    restart: "no"
    command: migrate up

  quorum-key-manager:
    <<: *container-common
    image: consensys/quorum-key-manager:v21.12.5
    depends_on:
      - vault
      - quorum-key-manager-migration
    volumes:
      - vault-token:/vault/token
      - ./quorum-key-manager/manifest.yml:/manifests/manifest.yml
      - ./certificates:/certificates
      - ./ca:/ca
      - ./quorum-key-manager/apikey:/apikey
    ports:
      - 8180:8080
      - 8181:8081
    environment:
      <<: *qkm-common
      HTTP_HOST: 0.0.0.0
      MANIFEST_PATH: /manifests
      HTTPS_ENABLED: "true"
      HTTPS_SERVER_KEY: /certificates/https.key
      HTTPS_SERVER_CERT: /certificates/https.crt
#      AUTH_OIDC_ISSUER_URL: https://consensys.eu.auth0.com/
#      AUTH_OIDC_CUSTOM_CLAIMS: https://api.orchestrate.network
#      AUTH_TLS_CA: /ca/ca.crt
      AUTH_API_KEY_FILE: /apikey/orchestrate_api_keys.csv
    command: run
    healthcheck:
      test: [ "CMD", "wget", "--spider", "--proxy", "off", "https://quorum-key-manager:8081/ready" ]
      interval: 10s
      timeout: 3s
      retries: 10

volumes:
  db-data-postgres-unit:
    driver: local
  db-data-api:
    driver: local
  vault-token:
    driver: local
  vault-plugin:
    driver: local

networks:
  orchestrate:
    name: orchestrate
    driver: bridge
