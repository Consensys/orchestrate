version: 2.1

parameters:
  GHA_Event:
    type: string
    default: ""
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""

orbs:
  go: circleci/go@1.5.0
  wait-for: cobli/wait-for@1.0.0

commands:
  prepare_golang:
    description: "Checkout, install all packages and handle cache"
    steps:
      - checkout
      - go/mod-download-cached

  prepare_docker:
    description: "Docker login"
    parameters:
      docker-image-registry:
        type: string
      docker-password:
        type: string
      docker-user:
        type: string
    steps:
      - run:
          name: Docker login
          command: |
            echo Login into << parameters.docker-image-registry >>
            [[ "<< parameters.docker-image-registry >>" == "consensys" ]] \
            && echo << parameters.docker-password >> | docker login docker.io -u << parameters.docker-user >> --password-stdin \
            || echo << parameters.docker-password >> | docker login << parameters.docker-image-registry >> -u << parameters.docker-user >> --password-stdin


  build_and_push:
    description: "Builds and push image"
    parameters:
      docker-image-platform:
        type: string
        default: linux/amd64
      docker-distroless-version:
        type: string
        default: nonroot
      docker-image-registry:
        type: string
      docker-password:
        type: string
      docker-user:
        type: string
      docker-image-tag:
        type: string
    steps:
      - run:
          name: Build and push image
          command: |
            export DOCKER_IMAGE_PLATFORM="<< parameters.docker-image-platform >>"
            export DOCKER_IMAGE_VERSION="<< parameters.docker-distroless-version >>"
            export DOCKER_IMAGE_REF="<< parameters.docker-image-registry >>/<< parameters.docker-image-tag >>"

            TARGETOS="$(echo "${DOCKER_IMAGE_PLATFORM}" | cut -d '/' -f 1)"
            TARGETARCH="$(echo "${DOCKER_IMAGE_PLATFORM}" | cut -d '/' -f 2)"

            if [ $TARGETARCH == "amd64" ]; then
              DOCKER_IMAGE_TAG="${DOCKER_IMAGE_REF}"
            else
              DOCKER_IMAGE_TAG="${DOCKER_IMAGE_REF}.${TARGETARCH}"
            fi

            echo "Building image ${DOCKER_IMAGE_TAG} for {os:${TARGETOS}, arch:$TARGETARCH}..."
            DOCKER_BUILDKIT=0 docker build --build-arg VERSION=${DOCKER_IMAGE_VERSION} \
             --label org.opencontainers.image.created=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
             --label org.opencontainers.image.url="https://consensys.net/codefi/orchestrate/" \
             --label org.opencontainers.image.source="${CIRCLE_REPOSITORY_URL}" \
             --label org.opencontainers.image.version="${CIRCLE-TAG-branch}" \
             --label org.opencontainers.image.revision="${CIRCLE_SHA1:0:7}" \
             --label org.opencontainers.image.vendor="ConsenSys Software Inc." \
             --label org.opencontainers.image.title="${CIRCLE_PROJECT_REPONAME}" \
             --label org.opencontainers.image.description="Orchestrate is a blockchain Transaction Orchestration system" \
             --label org.opencontainers.image.documentation="https://docs.orchestrate.consensys.net/" \
             --label org.opencontainers.image.licenses="BUSL-1.1" \
             --tag ${DOCKER_IMAGE_TAG} \
             .

            echo "Pushing image ${DOCKER_IMAGE_TAG} for {os:${TARGETOS}, arch:$TARGETARCH}..."
            docker push "${DOCKER_IMAGE_TAG}"


jobs:
  lint:
    executor:
      name: go/default
      tag: '1.16.8'
    resource_class: xlarge
    steps:
      - prepare_golang
      - run:
          name: Check lints
          command: |
            make lint-tools
            make lint-ci

  gobuild:
    executor:
      name: go/default
      tag: '1.16.8'
    steps:
      - prepare_golang
      - run:
          name: Build
          command: make gobuild

  test:
    docker:
      - image: cimg/go:1.16.8
    resource_class: xlarge
    steps:
      - prepare_golang
      - run:
          name: Run unit tests
          command: make ci-run-coverage-unit
      - store_test_results:
          path: ./build/coverage/unit.out
      - store_artifacts:
          path: ./build/coverage/unit.html
          destination: unit-coverage.html
      - persist_to_workspace:
          root: .
          paths:
            - ./build/coverage

  race:
    docker:
      - image: cimg/go:1.16.8
    resource_class: xlarge
    steps:
      - prepare_golang
      - run:
          name: Run unit tests (race)
          command: make run-race

  integration:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    steps:
      - run:
          name: Uninstall Go
          command: sudo rm -rvf /usr/local/go/
      - go/install:
          version: 1.16.8
      - prepare_golang
      - run:
          name: Integration tests
          command: make run-coverage-integration
      - store_test_results:
          path: ./build/coverage/integration.out
      - store_artifacts:
          path: ./build/coverage/integration.html
          destination: integration-coverage.html
      - persist_to_workspace:
          root: .
          paths:
            - ./build/coverage

  build-docker-image:
    docker:
      - image: cimg/base:2022.04
    resource_class: xlarge
    parameters:
      docker-distroless-version:
        type: string
        default: nonroot
      docker-image-registry:
        type: string
      docker-password:
        type: string
      docker-user:
        type: string
      docker-image-tag:
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - prepare_docker:
          docker-user: << parameters.docker-user >>
          docker-password: << parameters.docker-password >>
          docker-image-registry: << parameters.docker-image-registry >>
      - build_and_push:
          docker-image-platform: linux/amd64
          docker-distroless-version: << parameters.docker-distroless-version >>
          docker-image-registry: << parameters.docker-image-registry >>
          docker-password: << parameters.docker-password >>
          docker-user: << parameters.docker-user >>
          docker-image-tag: << parameters.docker-image-tag >>


  build-docker-arm-image:
    machine:
      image: 'ubuntu-2004:202101-01'
    resource_class: arm.large
    parameters:
      docker-distroless-version:
        type: string
        default: nonroot
      docker-image-registry:
        type: string
      docker-password:
        type: string
      docker-user:
        type: string
      docker-image-tag:
        type: string
    steps:
      - checkout
      - prepare_docker:
          docker-user: << parameters.docker-user >>
          docker-password: << parameters.docker-password >>
          docker-image-registry: << parameters.docker-image-registry >>
      - build_and_push:
          docker-image-platform: linux/arm64
          docker-distroless-version: << parameters.docker-distroless-version >>
          docker-image-registry: << parameters.docker-image-registry >>
          docker-password: << parameters.docker-password >>
          docker-user: << parameters.docker-user >>
          docker-image-tag: << parameters.docker-image-tag >>


  run-e2e:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    steps:
      - run:
          name: Uninstall Go
          command: sudo rm -rvf /usr/local/go/
      - go/install:
          version: 1.16.8
      - prepare_golang
      - wait-for/sh-command:
          seconds-between-retries: 3
          timeout: 30
          description: "deployment readiness"
          sh-command: nc -z ${READINESS_URL} 443
      - run:
          name: Running e2e
          environment:
            CUCUMBER_OUTPUTPATH: "/report/output/report.json"
            CUCUMBER_PATHS: "./tests/features"
            ARTIFACTS_PATH: "./tests/artifacts"
            CUCUMBER_FORMAT: cucumber
            CUCUMBER_STEPS_TIMEOUT: 30s
            KAFKA_CONSUMER_GROUP_NAME: e2e
            KAFKA_TLS_ENABLED: true
            KAFKA_TLS_INSECURE_SKIP_VERIFY: true
            KAFKA_SASL_ENABLED: true
            KAFKA_SASL_MECHANISM: PLAIN
          command: make e2e-ci
      - store_artifacts:
          path: ./build/report/report.html
          destination: report.html

  run-stress:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    parameters:
      stress_concurrency:
        type: string
        default: "5"
      stress_iteration:
        type: string
        default: "100"
      stress_timeout:
        type: string
        default: "10m"
    steps:
      - run:
          name: Uninstall Go
          command: sudo rm -rvf /usr/local/go/
      - go/install:
          version: 1.16.8
      - prepare_golang
      - wait-for/sh-command:
          seconds-between-retries: 3
          timeout: 30
          description: "deployment readiness"
          sh-command: nc -z ${READINESS_URL} 443
      - run:
          name: Running stress
          environment:
            ARTIFACTS_PATH: "./tests/artifacts"
            STRESS_CONCURRENCY: <<parameters.stress_concurrency>>
            STRESS_ITERATIONS: <<parameters.stress_iteration>>
            STRESS_TIMEOUT: <<parameters.stress_timeout>>
            KAFKA_CONSUMER_GROUP_NAME: "stress"
          command: |
            if [ -z ${KAFKA_SASL_USER} ]; then
              # Hardcoded value of $ConnectionString for Azure EventHub SASL users
              export KAFKA_SASL_USER="\$ConnectionString"
            fi
            make stress-ci
            exit $(docker inspect orchestrate_stress_1 --format='{{.State.ExitCode}}')

  run-performance:
    docker:
      - image: cimg/go:1.16.8
    resource_class: large
    steps:
      - prepare_golang
      - wait-for/sh-command:
          seconds-between-retries: 3
          timeout: 30
          description: "deployment readiness"
          sh-command: nc -z ${READINESS_URL} 443
      - run:
          name: Install gettext (envsubst)
          command: sudo apt-get update && sudo apt-get install gettext-base
      - run:
          name: Install vegeta
          command: make vegeta-tools
      - run:
          name: Running performance test
          command: make vegeta
      - store_artifacts:
          path: ./build/vegeta/plot.html
          destination: vegeta-plot.html

  deploy:
    docker:
      - image: cimg/base:2022.04
    parameters:
      docker-image-tag:
        type: string
      orchestrate-namespace:
        type: string
    steps:
      - checkout
      - run:
          name: Deploy << parameters.orchestrate-namespace >> environment
          command: >-
            ORCHESTRATE_TAG="<< parameters.docker-image-tag >>"
            ORCHESTRATE_NAMESPACE="<< parameters.orchestrate-namespace >>"
            make deploy-remote-env

  tag-docker-image:
    docker:
      - image: cimg/base:2022.04
    resource_class: xlarge
    parameters:
      docker-image-platform:
        type: string
        default: linux/amd64
      docker-distroless-version:
        type: string
        default: nonroot
      docker-image-source-tag:
        type: string
      docker-image-destination-tag:
        type: string
      docker-image-source-registry:
        type: string
      docker-image-destination-registry:
        type: string
      docker-source-user:
        type: string
      docker-source-password:
        type: string
      docker-destination-user:
        type: string
      docker-destination-password:
        type: string
      docker-image-sign:
        type: boolean
        default: false
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - prepare_docker:
          docker-user: << parameters.docker-source-user >>
          docker-password: << parameters.docker-source-password >>
          docker-image-registry: << parameters.docker-image-source-registry >>
      - prepare_docker:
          docker-user: << parameters.docker-destination-user >>
          docker-password: << parameters.docker-destination-password >>
          docker-image-registry: << parameters.docker-image-destination-registry >>
      - run:
          name: Build, push and sign images
          no_output_timeout: 90m
          command: |
            export DOCKER_IMAGE_SIGN="<< parameters.docker-image-sign >>"
            export DOCKER_IMAGE_PLATFORM="<< parameters.docker-image-platform >>"
            export DOCKER_IMAGE_VERSION="<< parameters.docker-distroless-version >>"
            export DOCKER_IMAGE_SOURCE_REF="<< parameters.docker-image-source-registry >>/<< parameters.docker-image-source-tag >>"
            export DOCKER_IMAGE_DESTINATION_REF="<< parameters.docker-image-destination-registry >>/<< parameters.docker-image-destination-tag >>"

            TARGETOS="$(echo "${DOCKER_IMAGE_PLATFORM}" | cut -d '/' -f 1)"
            TARGETARCH="$(echo "${DOCKER_IMAGE_PLATFORM}" | cut -d '/' -f 2)"

            DOCKER_IMAGE_SOURCE_TAG="${DOCKER_IMAGE_SOURCE_REF}"

            if [ $TARGETARCH == "amd64" ]; then
              DOCKER_IMAGE_DESTINATION_TAG="${DOCKER_IMAGE_DESTINATION_REF}"
              DOCKER_IMAGE_SOURCE_TAG="${DOCKER_IMAGE_SOURCE_REF}"
            else
              DOCKER_IMAGE_DESTINATION_TAG="${DOCKER_IMAGE_DESTINATION_REF}.${TARGETARCH}"
              DOCKER_IMAGE_SOURCE_TAG="${DOCKER_IMAGE_SOURCE_REF}.${TARGETARCH}"
            fi

            echo "Releasing image ${DOCKER_IMAGE_DESTINATION_TAG} for {os:${TARGETOS}, arch:$TARGETARCH}..."
            echo "Pulling docker image ${DOCKER_IMAGE_SOURCE_TAG}..."
            docker pull "${DOCKER_IMAGE_SOURCE_TAG}"

            echo "Tagging source image ${DOCKER_IMAGE_SOURCE_TAG} to destination registry ${DOCKER_IMAGE_DESTINATION_TAG}..."
            docker tag "${DOCKER_IMAGE_SOURCE_TAG}" "${DOCKER_IMAGE_DESTINATION_TAG}"

            if [ $DOCKER_IMAGE_SIGN == "true" ]; then
                mkdir -p $HOME/.docker/trust/private
                echo $DCT_KEY | base64 --decode > $HOME/.docker/trust/private/$DCT_HASH.key
                chmod 600 $HOME/.docker/trust/private/$DCT_HASH.key
                docker trust key load $HOME/.docker/trust/private/$DCT_HASH.key --name opsquorum

                echo "Waiting for few seconds for image to become available..."
                sleep 10

                echo "Signing docker image ${DOCKER_IMAGE_DESTINATION_TAG}..."
                docker trust sign --local "${DOCKER_IMAGE_DESTINATION_TAG}"
            fi

            echo "Pushing docker image ${DOCKER_IMAGE_DESTINATION_TAG}..."
            docker push "${DOCKER_IMAGE_DESTINATION_TAG}"

workflows:
  version: 2
  default:
    jobs:
      - lint:
          filters:
            tags:
              ignore:
                - /^v.*/
      - gobuild:
          filters:
            tags:
              ignore:
                - /^v.*/
      - test:
          requires:
            - gobuild
            - lint
      - race:
          requires:
            - gobuild
            - lint
      - integration:
          requires:
            - gobuild
            - lint
      - build-docker-image: # Push Develop image
          name: push-orchestrate-dev-image
          context:
            - cloudsmith-tanuki-rw
          docker-image-tag: orchestrate:${CIRCLE_SHA1:0:7}
          docker-distroless-version: debug-nonroot
          docker-image-registry: ${CLOUDSMITH_DEV_REPO}
          docker-user: ${CLOUDSMITH_USER_RW}
          docker-password: ${CLOUDSMITH_PASS_RW}
          filters:
            branches:
              only: main
            tags:
              only: /^v.*/
      - build-docker-arm-image: # Push Develop arm image
          name: push-orchestrate-dev-arm-image
          context:
            - cloudsmith-tanuki-rw
          docker-image-tag: orchestrate:${CIRCLE_SHA1:0:7}
          docker-distroless-version: debug-nonroot
          docker-image-registry: ${CLOUDSMITH_DEV_REPO}
          docker-user: ${CLOUDSMITH_USER_RW}
          docker-password: ${CLOUDSMITH_PASS_RW}
          filters:
            branches:
              only: main
            tags:
              only: /^v.*/
      - deploy:
          name: deploy-qa
          context:
            - cloudsmith-tanuki-rw
            - tanuki-orchestrate-qa
          docker-image-tag: ${CIRCLE_SHA1:0:7}
          orchestrate-namespace: qa
          requires:
            - push-orchestrate-dev-image
          filters:
            branches:
              only: main
      - deploy:
          name: deploy-staging
          context:
            - cloudsmith-tanuki-rw
            - tanuki-orchestrate-staging
          docker-image-tag: ${CIRCLE_SHA1:0:7}
          orchestrate-namespace: staging
          requires:
            - push-orchestrate-dev-image
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - run-e2e:
          name: run-qa-e2e
          context:
            - tanuki-orchestrate-qa
          requires:
            - deploy-qa
      - tag-docker-image: # Tag develop image
          name: tag-develop
          context:
            - cloudsmith-tanuki-rw
          docker-image-source-tag: orchestrate:${CIRCLE_SHA1:0:7}
          docker-image-destination-tag: orchestrate:develop
          docker-image-source-registry: ${CLOUDSMITH_DEV_REPO}
          docker-image-destination-registry: ${CLOUDSMITH_DEV_REPO}
          docker-source-user: ${CLOUDSMITH_USER_RW}
          docker-source-password: ${CLOUDSMITH_PASS_RW}
          docker-destination-user: ${CLOUDSMITH_USER_RW}
          docker-destination-password: ${CLOUDSMITH_PASS_RW}
          requires:
            - run-qa-e2e
      - run-e2e:
          name: run-staging-e2e
          context:
            - tanuki-orchestrate-staging
          requires:
            - deploy-staging
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - run-stress:
          name: run-staging-stress
          context:
            - tanuki-orchestrate-staging
          requires:
            - run-staging-e2e
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - run-performance:
          name: run-staging-performance
          context:
            - tanuki-orchestrate-staging
          requires:
            - run-staging-e2e
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - wait-for-approval:
          type: approval
          requires:
#            - run-staging-e2e
            - push-orchestrate-dev-image
            - push-orchestrate-dev-arm-image
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - tag-docker-image: # Tag prod image
          name: release-<< matrix.docker-image-destination-tag >>-<< matrix.docker-image-platform >>
          context:
            - cloudsmith-tanuki-rw
            - dockerhub-opsquorum-dct
          matrix:
            parameters:
              docker-image-destination-tag: [ "orchestrate:${CIRCLE_TAG}", "orchestrate:latest" ]
              docker-image-platform: [ "linux/amd64", "linux/arm64" ]
          docker-image-source-tag: orchestrate:${CIRCLE_SHA1:0:7}
          docker-image-source-registry: ${CLOUDSMITH_DEV_REPO}
          docker-image-destination-registry: consensys
          docker-source-user: ${CLOUDSMITH_USER_RW}
          docker-source-password: ${CLOUDSMITH_PASS_RW}
          docker-destination-user: ${DOCKER_USER_RW}
          docker-destination-password: ${DOCKER_PASSWORD_RW}
          docker-image-sign: true
          requires:
            - wait-for-approval
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
  nightly-performance:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "orchestrate_nightly_performance", << pipeline.schedule.name >> ]
    jobs:
      - run-performance:
          context:
            - tanuki-orchestrate-staging

  manual-performance:
    when:
      equal: [ "workflow_dispatch", << pipeline.parameters.GHA_Event >> ]
    jobs:
      - run-performance:
          context:
            - tanuki-orchestrate-staging
